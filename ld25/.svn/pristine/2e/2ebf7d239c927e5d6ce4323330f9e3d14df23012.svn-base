package com.emveyh.ld25.entity;

import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.utils.Array;
import com.emveyh.ld25.Globals;
import com.emveyh.ld25.TextureManager;
import com.emveyh.ld25.map.MapManager;
import com.emveyh.ld25.map.Tile;

public class EntityManager {

	private static final EntityManager INSTANCE = new EntityManager();
	
	public static EntityManager getInstance() {
		return EntityManager.INSTANCE;
	}
	
	private EntityManager() {}
	
	private Array<Entity> entities = new Array<Entity>();
	
	private PlayerEntity selectedPlayerEntity;
	
	
	public void registerEntity(Entity entity) {
		entities.add(entity);
	}
	
	public void unregisterEntity(Entity entity) {
		entities.removeValue(entity, false);
		Tile tile = MapManager.getInstance().getTileAtFloatPoint(entity.getX(), entity.getY());
		if(tile != null) {
			tile.setEntity(null);
		}
	}

	public Array<Entity> getEntities() {
		return entities;
	}
	
	public void renderEntities(SpriteBatch batch) {
		for(Entity entity : entities) {
			entity.draw(batch);
			System.out.println(entity.getHpPercent());
			if(entity.getHpPercent() > 75) {
			batch.draw(TextureManager.getInstance().getSprites()[4][0], entity.getX(), entity.getY()+Globals.getInstance().getTileSize(), Globals.getInstance().getTileSize(), Globals.getInstance().getTileSize());
			} else if(entity.getHpPercent() > 50) {
				batch.draw(TextureManager.getInstance().getSprites()[5][0], entity.getX(), entity.getY()+Globals.getInstance().getTileSize(), Globals.getInstance().getTileSize(), Globals.getInstance().getTileSize());

			} else if(entity.getHpPercent() > 25) {
				batch.draw(TextureManager.getInstance().getSprites()[6][0], entity.getX(), entity.getY()+Globals.getInstance().getTileSize(), Globals.getInstance().getTileSize(), Globals.getInstance().getTileSize());

			} else if(entity.getHpPercent() > 0) {
				batch.draw(TextureManager.getInstance().getSprites()[7][0], entity.getX(), entity.getY()+Globals.getInstance().getTileSize(), Globals.getInstance().getTileSize(), Globals.getInstance().getTileSize());

			}
		}
	}
	
	public void tickEntities() {
		for(Entity entity : entities) {
			entity.tick();
		}
	}

	public PlayerEntity getSelectedPlayerEntity() {
		return selectedPlayerEntity;
	}

	public void setSelectedPlayerEntity(PlayerEntity selectedPlayerEntity) {
		this.selectedPlayerEntity = selectedPlayerEntity;
	}
	

	
	
	
	
}
